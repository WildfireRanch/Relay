# File: agents/mcp_agent.py
# Purpose: Central orchestrator for Relay ‚Äî planner-based routing, MetaPlanner override, critic validation, and Trainer logging to Neo4j.

import traceback
from typing import Optional

from agents import (
    planner_agent,
    codex_agent,
    docs_agent,
    control_agent,
    echo_agent,
    trainer_agent,
)
from agents.metaplanner_agent import suggest_route
from agents.critic_agent import run_critics

from services.context_injector import build_context
from core.logging import log_event
from services.queue import queue_action

# Routing map for all available agent handlers
ROUTING_TABLE = {
    "codex": codex_agent.handle,
    "docs": docs_agent.analyze,
    "control": control_agent.run,
    "echo": echo_agent.run,
    # Add additional routes here
}

async def run_mcp(
    query: str,
    files: Optional[list[str]] = None,
    topics: Optional[list[str]] = None,
    role: str = "planner",
    user_id: str = "anonymous",
    debug: bool = False,
):
    """
    Main MCP entry point.
    Builds context, delegates to planner, allows MetaPlanner override,
    executes routed agent, and logs to Neo4j via TrainerAgent.
    """
    files = files or []
    topics = topics or []

    try:
        # ‚úÖ FIXED: Await async context builder
        context_data = await build_context(query, files, topics, debug=debug)
        if isinstance(context_data, dict):
            context = context_data["context"]
            files_used = context_data["files_used"]
        else:
            context = context_data
            files_used = []
    except Exception as e:
        log_event("mcp_context_error", {"error": str(e), "trace": traceback.format_exc()})
        return {"error": "Failed to build context."}

    log_event("mcp_context_loaded", {"user": user_id, "files": files_used})

    try:
        if role == "planner":
            # üß† Ask Planner for a route and steps
            plan = await planner_agent.ask(query=query, context=context)

            # üîÅ Optionally override with MetaPlanner
            suggested = await suggest_route(query=query, plan=plan, user_id=user_id)
            if suggested and suggested != plan.get("route"):
                plan["meta_override"] = suggested
                route = suggested
            else:
                route = plan.get("route")

            # üö¶ Route to the correct agent
            handler = ROUTING_TABLE.get(route)
            if handler:
                routed_result = await handler(message=query, context=context, user_id=user_id)
            else:
                routed_result = {"response": f"No agent found for route: {route}"}

            # ‚úÖ Validate with critics
            critics = await run_critics(routed_result, query)

            # üß† Log result to graph memory
            await trainer_agent.ingest_results(
                query=query,
                plan=plan,
                routed_result=routed_result,
                critics=critics,
                feedback=None,
                user_id=user_id,
            )

            result = {
                "plan": plan,
                "routed_result": routed_result,
                "critics": critics,
            }

        elif role == "codex":
            # ‚úçÔ∏è Patch mode using CodexAgent
            patch_result = await codex_agent.handle(message=query, context=context, user_id=user_id)
            action = patch_result.get("action")
            if action and action.get("type") == "patch":
                queue_action(action, reason="Generated by MCP Codex")
                patch_result["queued"] = True

            critics = await run_critics(patch_result, query)

            await trainer_agent.ingest_results(
                query=query,
                plan=patch_result,
                routed_result=patch_result,
                critics=critics,
                feedback=None,
                user_id=user_id,
            )

            result = patch_result

        else:
            result = {"error": f"Unknown role: {role}"}

        log_event("mcp_result", {"user": user_id, "role": role, "result": result})

        if debug:
            return {"result": result, "context": context, "files_used": files_used}
        return result

    except Exception as e:
        log_event("mcp_agent_error", {"role": role, "error": str(e), "trace": traceback.format_exc()})
        return {"error": f"Failed to execute {role} agent."}
