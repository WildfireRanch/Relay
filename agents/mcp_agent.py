# File: agents/mcp_agent.py
# Purpose: Central orchestrator for agent workflows in Relay Command Center
# Roles: planner, codex (with critics), context injection, action queue

import traceback
from typing import Optional

from agents import planner_agent, codex_agent
from services.context_injector import build_context
from core.logging import log_event
from services.queue import queue_action


async def run_mcp(
    query: str,
    files: Optional[list[str]] = None,
    topics: Optional[list[str]] = None,
    role: str = "planner",
    user_id: str = "anonymous",
    debug: bool = False,
):
    """
    Master Control Program (MCP) agent entrypoint.
    Routes query to appropriate agent with context injection.

    Args:
        query: User question or command.
        files: Code files to include in context.
        topics: External context markdown topics.
        role: Agent role to invoke: planner, codex
        user_id: For logging and memory (if implemented)
        debug: If True, enables context builder debug mode and returns
            context metadata with the result

    Returns:
        Result dictionary. When ``debug`` is True, the return value also
        includes the injected context and a list of ``files_used``.
    """

    files = files or []
    topics = topics or []

    # Step 1: Inject multi-domain context
    try:
        context_data = build_context(query, files, topics, debug=debug)
        if isinstance(context_data, dict):
            context = context_data["context"]
            files_used = context_data["files_used"]
        else:
            context = context_data
            files_used = []
    except Exception as e:
        log_event("mcp_context_error", {"error": str(e), "trace": traceback.format_exc()})
        return {"error": "Failed to build context."}

    log_event("mcp_context_loaded", {"user": user_id, "files": files_used})

    try:
        # Step 2: Route to appropriate agent role
        if role == "planner":
            plan = await planner_agent.ask(query=query, context=context)
            result = {"plan": plan}

        elif role == "codex":
            patch_result = await codex_agent.handle(message=query, context=context, user_id=user_id)
            action = patch_result.get("action")
            if action and action.get("type") == "patch":
                queue_action(action, reason="Generated by MCP Codex")
                patch_result["queued"] = True
            result = patch_result

        else:
            result = {"error": f"Unknown role: {role}"}

        log_event("mcp_result", {"user": user_id, "role": role, "result": result})

        if debug:
            return {"result": result, "context": context, "files_used": files_used}

        return result

    except Exception as e:
        log_event("mcp_agent_error", {"role": role, "error": str(e), "trace": traceback.format_exc()})
        return {"error": f"Failed to execute {role} agent."}
