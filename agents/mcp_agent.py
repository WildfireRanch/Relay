# File: agents/mcp_agent.py
# Purpose: Central orchestrator for agent workflows in Relay Command Center
# Roles: planner, critic, codex, status, docs

import traceback
from agents import planner_agent, critic_agent, codex_agent
from services.context_injector import build_context
from utils.logger import log_event
from services.queue import queue_action


async def run_mcp(
    query: str,
    files: list[str] = [],
    topics: list[str] = [],
    role: str = "planner",
    user_id: str = "anonymous",
    debug: bool = False,
):
    """
    Master Control Program (MCP) agent entrypoint.
    Routes query to appropriate agent with context injection.

    Args:
        query: User question or command.
        files: Code files to include in context.
        topics: External context markdown topics.
        role: Agent role to invoke: planner, critic, codex
        user_id: For logging and memory (if implemented)
        debug: If True, returns context and metadata

    Returns:
        Dictionary containing agent result and context metadata (optional).
    """

    # Step 1: Inject multi-domain context
    try:
        context_data = build_context(query, files, topics, debug=True)
        context = context_data["context"]
        files_used = context_data["files_used"]
    except Exception as e:
        log_event("mcp_context_error", {"error": str(e), "trace": traceback.format_exc()})
        return {"error": "Failed to build context."}

    log_event("mcp_context_loaded", {"user": user_id, "files": files_used})

    try:
        # Step 2: Route to appropriate agent role
        if role == "planner":
            plan = await planner_agent.ask(query=query, context=context)
            critique = await critic_agent.review(plan=plan, context=context)
            result = {"plan": plan, "critique": critique}

        elif role == "critic":
            critique = await critic_agent.review(plan=query, context=context)
            result = {"critique": critique}

        elif role == "codex":
            patch = await codex_agent.generate_patch(query=query, context=context)
            queue_action(patch, reason="Generated by MCP Codex")
            result = {"patch": patch, "queued": True}

        else:
            result = {"error": f"Unknown role: {role}"}

        log_event("mcp_result", {"user": user_id, "role": role, "result": result})

        if debug:
            return {"result": result, "context": context, "files_used": files_used}

        return result

    except Exception as e:
        log_event("mcp_agent_error", {"role": role, "error": str(e), "trace": traceback.format_exc()})
        return {"error": f"Failed to execute {role} agent."}
